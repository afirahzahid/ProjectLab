//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Project2.Models
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.ComponentModel.DataAnnotations.Schema;
    using System.Linq;
    using System.Web.Mvc;

    
    public partial class dbStudent
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public dbStudent()
        {
            this.dbAllotments = new HashSet<dbAllotment>();
            this.dbMesses = new HashSet<dbMess>();
            this.dbMessAttendances = new HashSet<dbMessAttendance>();
        }


        public class UniqueSCNICAttribute : ValidationAttribute
        {
            public override bool IsValid(object value)
            {
                dbHostelManagementEntities db = new dbHostelManagementEntities();
                var userWithTheSameCNIC = db.dbStudents.SingleOrDefault(
                    u => u.S_CNIC == (int)value);
                return userWithTheSameCNIC == null;
            }

        }

        [Required]
        [Display(Name = "CNIC")]
        [UniqueSCNIC(ErrorMessage = "This CNIC is already registered")]
        [RegularExpression(@"^([0-9]{13})*$",
            ErrorMessage = "CNIC length must be 13 and without dashes")]
        public long S_CNIC { get; set; }

        public class UniqueRegAttribute : ValidationAttribute
        {
            public override bool IsValid(object value)
            {
                dbHostelManagementEntities db = new dbHostelManagementEntities();
                var userWithTheSameReg = db.dbStudents.SingleOrDefault(
                    u => u.S_RegNO == (string)value);
                return userWithTheSameReg == null;
            }

        }
        [Required]
        [Display(Name = "Reg No")]
        [UniqueReg(ErrorMessage = "This Reg No is already registered")]
        [RegularExpression(@"^[0-9]{4}[-][a-zA-Z]{2,3}[-][0-9]{2,3}$", ErrorMessage = "Entered Reg No format is not valid.")]
        //[Remote("doesUserNameExist", "Account", HttpMethod = "POST", ErrorMessage = "RegNo already exists. Please enter a different user name.")]
        public string S_RegNO { get; set; }

        [Required]
        [Display(Name = "Name")]
        [RegularExpression(@"^[a-zA-Z ]*$",
            ErrorMessage = "Invalid characters in Name")]
        public string S_Name { get; set; }

        [Required]
        [Display(Name = "Father Name")]
        [RegularExpression(@"^[a-zA-Z ]*$",
            ErrorMessage = "Invalid characters in Father Name")]
        public string S_FatherName { get; set; }
        [Required]
        [Display(Name = "Address")]
        public string S_Address { get; set; }

        [Required]
        [RegularExpression(@"^([0-9]{10})*$",
            ErrorMessage = "Phone No length must be equal to 11 and only contain digits")]
        [Display(Name = "PhoneNo")]
        public long S_PhoneNo { get; set; }

        [Required]
        [Range(typeof(DateTime), "1/1/1994", "1/1/2003",
                ErrorMessage = "Value for {0} must be between {1:d} and {2:d}")]
        [Display(Name = "Date of Birth")]
        public DateTime S_DOB { get; set; }

        [DisplayFormat(ApplyFormatInEditMode = false)]
        private DateTime? CreatedOn;
        //public DateTime S_CurrentDate { get; set; }
        //private DateTime S_CurrentDate = DateTime.Now;
        public System.DateTime S_CurrentDate { get { return CreatedOn ?? DateTime.Today; } set { CreatedOn = value; } }

        public class UniqueEmailAttribute : ValidationAttribute
        {
            public override bool IsValid(object value)
            {
                dbHostelManagementEntities db = new dbHostelManagementEntities();
                var userWithTheSameCNIC = db.dbStudents.SingleOrDefault(
                    u => u.S_Email == (string)value);
                return userWithTheSameCNIC == null;
            }

        }
        [Required]
        [Display(Name ="Email")]
        [UniqueEmail(ErrorMessage = "This Email Id is already registered")]
        [RegularExpression("^[a-zA-Z0-9_\\.-]+@([a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,6}$", ErrorMessage = "E-mail is not valid")]
        public string S_Email { get; set; }

        [Display(Name ="Password")]
        [DataType(DataType.Password)]
        [StringLength(50, MinimumLength = 6,
            ErrorMessage = "passwords must be a minimum of 6 characters")]
        [Required(ErrorMessage = "Password is Required")]
        public string S_Password { get; set; }
        [DataType(DataType.Password)]
        [Display(Name ="Confirm Password")]
        [System.Web.Mvc.Compare("S_Password")]
        [Required(ErrorMessage = "Confirm Password is Required")]
        public string ConfirmPassword { get; set; }


        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<dbAllotment> dbAllotments { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<dbMess> dbMesses { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<dbMessAttendance> dbMessAttendances { get; set; }
    }
    
    
    
}
